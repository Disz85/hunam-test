/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as LoginRouteImport } from './routes/login';
import { Route as AdminRouteImport } from './routes/admin';
import { Route as IndexRouteImport } from './routes/index';
import { Route as AdminIndexRouteImport } from './routes/admin/index';
import { Route as AdminEmployeesIndexRouteImport } from './routes/admin/employees/index';
import { Route as AdminEmployeesNewRouteImport } from './routes/admin/employees/new';
import { Route as AdminEmployeesIdEditRouteImport } from './routes/admin/employees/$id/edit';

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any);
const AdminEmployeesIndexRoute = AdminEmployeesIndexRouteImport.update({
  id: '/employees/',
  path: '/employees/',
  getParentRoute: () => AdminRoute,
} as any);
const AdminEmployeesNewRoute = AdminEmployeesNewRouteImport.update({
  id: '/employees/new',
  path: '/employees/new',
  getParentRoute: () => AdminRoute,
} as any);
const AdminEmployeesIdEditRoute = AdminEmployeesIdEditRouteImport.update({
  id: '/employees/$id/edit',
  path: '/employees/$id/edit',
  getParentRoute: () => AdminRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/admin': typeof AdminRouteWithChildren;
  '/login': typeof LoginRoute;
  '/admin/': typeof AdminIndexRoute;
  '/admin/employees/new': typeof AdminEmployeesNewRoute;
  '/admin/employees': typeof AdminEmployeesIndexRoute;
  '/admin/employees/$id/edit': typeof AdminEmployeesIdEditRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/login': typeof LoginRoute;
  '/admin': typeof AdminIndexRoute;
  '/admin/employees/new': typeof AdminEmployeesNewRoute;
  '/admin/employees': typeof AdminEmployeesIndexRoute;
  '/admin/employees/$id/edit': typeof AdminEmployeesIdEditRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/admin': typeof AdminRouteWithChildren;
  '/login': typeof LoginRoute;
  '/admin/': typeof AdminIndexRoute;
  '/admin/employees/new': typeof AdminEmployeesNewRoute;
  '/admin/employees/': typeof AdminEmployeesIndexRoute;
  '/admin/employees/$id/edit': typeof AdminEmployeesIdEditRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/'
    | '/admin/employees/new'
    | '/admin/employees'
    | '/admin/employees/$id/edit';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/login'
    | '/admin'
    | '/admin/employees/new'
    | '/admin/employees'
    | '/admin/employees/$id/edit';
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/admin/'
    | '/admin/employees/new'
    | '/admin/employees/'
    | '/admin/employees/$id/edit';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AdminRoute: typeof AdminRouteWithChildren;
  LoginRoute: typeof LoginRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/admin': {
      id: '/admin';
      path: '/admin';
      fullPath: '/admin';
      preLoaderRoute: typeof AdminRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/admin/': {
      id: '/admin/';
      path: '/';
      fullPath: '/admin/';
      preLoaderRoute: typeof AdminIndexRouteImport;
      parentRoute: typeof AdminRoute;
    };
    '/admin/employees/': {
      id: '/admin/employees/';
      path: '/employees';
      fullPath: '/admin/employees';
      preLoaderRoute: typeof AdminEmployeesIndexRouteImport;
      parentRoute: typeof AdminRoute;
    };
    '/admin/employees/new': {
      id: '/admin/employees/new';
      path: '/employees/new';
      fullPath: '/admin/employees/new';
      preLoaderRoute: typeof AdminEmployeesNewRouteImport;
      parentRoute: typeof AdminRoute;
    };
    '/admin/employees/$id/edit': {
      id: '/admin/employees/$id/edit';
      path: '/employees/$id/edit';
      fullPath: '/admin/employees/$id/edit';
      preLoaderRoute: typeof AdminEmployeesIdEditRouteImport;
      parentRoute: typeof AdminRoute;
    };
  }
}

interface AdminRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute;
  AdminEmployeesNewRoute: typeof AdminEmployeesNewRoute;
  AdminEmployeesIndexRoute: typeof AdminEmployeesIndexRoute;
  AdminEmployeesIdEditRoute: typeof AdminEmployeesIdEditRoute;
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminEmployeesNewRoute: AdminEmployeesNewRoute,
  AdminEmployeesIndexRoute: AdminEmployeesIndexRoute,
  AdminEmployeesIdEditRoute: AdminEmployeesIdEditRoute,
};

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
